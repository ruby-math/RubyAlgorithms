quit
test + array[0..2]
test = [1, 2, 3]
test
test.push(*array[1..2])  
test.concat array[0..2]
test + array[0..2]
test << array[0..2]
test = []
test << array[0..2]
array[0..2]
left_array
array
j
left_array
c
i
left_array
r
p
c
right_array
k
r
p
c
left_array
r
p
k
quit
r
array2[j]
array1[i]
array[i]
k
r
p
c
b 52
array2
c
array2
array1
array[1]
q + j
j
r
n2
array
array1
array2
b 52
array1
left_array
b 50
p..r
j
q + j
j
left_array
c
b 46
p
i
c
b 42
n2
n1
r
q
p 
n1
quit
1..s
s = 5
n2 = r - m
n
n = m - p + 1
n = q - p + 1
r
p
m
quit
r
q
p
array
c
r
p
c
r
p
c
r
p
c
array
r
p
c
r
p
quit
r
p
c
r
p
c
q
c
b 29
quit
r
p
c
r
p
c
r
p
c
r
p
array
c
r
p
array
c
array
c
b 30
quit
`git ls-files`.class
`git ls-files`
`git ls-files`.split("\x0")
`git ls-dir`.split("\x0")
`git ls-tree --name-only`.split("\x0")
`git ls-tree -name-only`.split("\x0")
`git ls-files -z`.split("\x0")
`git ls-tree -r`.split("\x0")
`git ls-tree -d`.split("\x0")
`git ls-tree -z`.split("\x0")
`git ls-files -z`.split("\x0")
git
require 'algorithms/sort/sortable'
$LOAD_PATH
c
@array.length
array.length
c
InsertionSort
require 'insertion_sort'
InsertionSort
quit
Interface.method
Interface
method.source_location
method.owenr
method.class
method :sort
method
self
